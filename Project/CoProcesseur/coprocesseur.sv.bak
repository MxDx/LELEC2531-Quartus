module FloatingPointAdder (
    input logic [31:0] A,
    input logic [31:0] B,
    output logic [31:0] S,
    output logic Z,
    output logic N,
    output logic V,
    output logic C
);
    logic        A_sign;
    logic        B_sign;
    logic [7:0]  A_exp;
    logic [7:0]  B_exp;
    logic [23:0] A_mant;
    logic [23:0] B_mant;

    logic        S_sign;
    logic [7:0]  S_exp;
    logic [23:0] S_mant;

    always_comb begin

        A_sign = A[31];
        B_sign = B[31];

        A_exp = A[30:23];
        B_exp = B[30:23];

        A_mant = A[22:0];
        A_mant[23] = 1'b1; // Add implicit 1
        B_mant = B[22:0];
        B_mant[23] = 1'b1; // Add implicit 1

        if (A_exp > B_exp) begin
            S_exp = A_exp;
            B_mant = B_mant >> (A_exp - B_exp);
        end
        else begin
            S_exp = B_exp;
            A_mant = A_mant >> (B_exp - A_exp);
        end

        if (A_sign == B_sign) begin
            S_sign = A_sign;
            S_mant = A_mant + B_mant;
        end
        else begin
            if (A_mant > B_mant) begin
                S_sign = A_sign;
                S_mant = A_mant - B_mant;
            end
            else begin
                S_sign = B_sign;
                S_mant = B_mant - A_mant;
            end
        end
        
        if (S_mant[23] == 1) begin
            S_mant = S_mant >> 1;
            S_exp = S_exp + 1;
        end

        if (S_exp == 255) begin
            S_mant = 0;
            S_exp = 0;
        end

        if (S_exp == 0) begin
            S_mant = 0;
        end

        if (S_mant == 0) begin
            S_exp = 0;
        end
    
    end

    assign S[31] = S_sign;
    assign S[30:23] = S_exp;
    assign S[22:0] = S_mant;

    assign Z = (S_exp == 0 && S_mant == 0);
    assign N = (S_sign == 1);
    assign V = (S_exp == 255 && S_mant != 0);
    assign C = (S_exp == 255 && S_mant == 0);

endmodule


module FloatingPointAdder_tb;

    logic [31:0] A;
    logic [31:0] B;
    logic [31:0] S;
    logic Z;
    logic N;
    logic V;
    logic C;

    FloatingPointAdder dut (
        .A(A),
        .B(B),
        .S(S),
        .Z(Z),
        .N(N),
        .V(V),
        .C(C)
    );

    initial begin
        // Test case 1: A = 1.5, B = 2.5
        A = 32'h3FC00000; // 1.5 in IEEE 754 single precision format
        B = 32'h40000000; // 2.5 in IEEE 754 single precision format
        #10;
        $display("Test case 1: A = 1.5, B = 2.5");
        $display("S = %f", $itor(S));
        $display("Z = %b", Z);
        $display("N = %b", N);
        $display("V = %b", V);
        $display("C = %b", C);
        #10;

        // Test case 2: A = -3.75, B = 1.25
        A = 32'hc0700000; // -3.75 in IEEE 754 single precision format
        B = 32'h3fa00000; // 1.25 in IEEE 754 single precision format
        #10;
        $display("Test case 2: A = -3.75, B = 1.25");
        $display("S = %f", $itor(S));
        $display("Z = %b", Z);
        $display("N = %b", N);
        $display("V = %b", V);
        $display("C = %b", C);
        #10;

        $stop;
    end

endmodule
